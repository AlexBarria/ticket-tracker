# This docker-compose file orchestrates all the microservices for the Ticket Tracker app.
services:
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - ./postgres/data:/var/lib/postgresql/data
      - ./postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ticket-tracker-net

  phoenix:
    image: arizephoenix/phoenix:latest
    container_name: phoenix
    ports:
      - "6006:6006"   # Phoenix UI
      - "4317:4317"   # OTLP gRPC
      - "4318:4318"   # OTLP HTTP (optional)
    environment:
      - PHOENIX_PORT=6006
    restart: unless-stopped
    networks:
      - ticket-tracker-net

  minio:
    image: minio/minio:latest
    container_name: minio_s3
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "9000:9000"  # API Port
      - "9001:9001"  # Console Port
    volumes:
      - ./minio/data:/data
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - ticket-tracker-net

  create-minio-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
        /bin/sh -c "
        /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ROOT_USER} ${MINIO_ROOT_PASSWORD};
        /usr/bin/mc mb myminio/${MINIO_BUCKET} --ignore-existing;
        /usr/bin/mc policy set public myminio/${MINIO_BUCKET};
        exit 0;
        "

  mlflow:
    image: python:3.10  # Use a python image to install dependencies
    container_name: mlflow_server
    command: >
      sh -c "pip install --no-cache-dir mlflow boto3 psycopg2-binary &&
           export MLFLOW_BACKEND_STORE_URI='postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/mlflow_db' &&
           export MLFLOW_DEFAULT_ARTIFACT_ROOT='s3://${MINIO_BUCKET}/mlflow-artifacts' &&
           python -m uvicorn mlflow.server.fastapi_app:app --host 0.0.0.0 --port 5000"
    ports:
      - "5001:5000"
    environment:
      - AWS_ACCESS_KEY_ID=${MINIO_ROOT_USER}
      - AWS_SECRET_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - MINIO_BUCKET=${MINIO_BUCKET}
    depends_on:
      - postgres
      - create-minio-bucket
    restart: unless-stopped
    networks:
      - ticket-tracker-net

  ocr-service:
    build: ./ocr-service
    container_name: ocr_service
    ports:
      - "8001:8000"
    volumes:
      - ./ocr-service/app:/app
    restart: unless-stopped
    networks:
      - ticket-tracker-net

  agent-1-formatter:
    build: ./agent-1-formatter
    container_name: agent_1
    ports:
      - "8002:8000"
    volumes:
      - ./agent-1-formatter/app:/code/app
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}   
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ROOT_USER}
      - MINIO_SECRET_KEY=${MINIO_ROOT_PASSWORD}
      - MINIO_BUCKET=${MINIO_BUCKET}
      - OTEL_SERVICE_NAME=agent-1-formatter
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=phoenix:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
    depends_on:
      - postgres
      - phoenix
    restart: unless-stopped
    networks:
      - ticket-tracker-net

  agent-2-rag:
    build: ./agent-2-rag
    container_name: agent_2
    ports:
      - "8003:8000"
    volumes:
      - ./agent-2-rag/app:/app
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - WEB_AGENT_URL=http://tool-web:8000/search
      - GUARDRAILS_URL=http://guardrails:8000/validate
      - GUARDRAILS_ENABLED=${GUARDRAILS_ENABLED:-false}
      - OTEL_SERVICE_NAME=agent-2-rag
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=phoenix:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
    depends_on:
      - postgres
      - tool-web
      - phoenix
    restart: unless-stopped
    networks:
      - ticket-tracker-net

  ui:
    build: ./ui
    container_name: streamlit_ui
    ports:
      - "8501:8501"
    volumes:
      - ./ui/app:/app
    environment:
      - AUTH0_DOMAIN=${AUTH0_DOMAIN}
      - AUTH0_CLIENT_ID=${AUTH0_CLIENT_ID}
      - AUTH0_CLIENT_SECRET=${AUTH0_CLIENT_SECRET}
    depends_on:
      - agent-2-rag
      - evaluation-service
    restart: unless-stopped
    networks:
      - ticket-tracker-net

  tool-web:
    build: ./tool-web
    container_name: tool_web
    ports:
      - "8004:8000"
    environment:
      - WEB_SEARCH_PROVIDER=${WEB_SEARCH_PROVIDER:-tavily}
      - TAVILY_API_KEY=${TAVILY_API_KEY}   
      - OPENAI_MODEL=${OPENAI_MODEL}      
      - OTEL_SERVICE_NAME=tool-web
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=phoenix:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
    networks:
      - ticket-tracker-net

  guardrails:
    build:
      context: ./guardrails
      args:
        GUARDRAILS_ENABLED: ${GUARDRAILS_ENABLED:-false}
        GUARDRAILS_TOKEN: ${GUARDRAILS_TOKEN}
    container_name: guardrails
    environment:
      - OTEL_SERVICE_NAME=guardrails
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=phoenix:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
    ports:
      - "8005:8000"
    networks:
      - ticket-tracker-net

  evaluation-service:
    build: ./evaluation-service
    container_name: evaluation_service
    ports:
      - "8006:8006"
    environment:
      - DATABASE_URL=postgresql+psycopg2://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - OPENAI_MODEL=${OPENAI_MODEL}
      - AGENT_2_URL=http://agent-2-rag:8000
      - EVAL_SCHEDULE_CRON=${EVAL_SCHEDULE_CRON:-0 2 * * *}
      - EVAL_BATCH_SIZE=${EVAL_BATCH_SIZE:-5}
      - EVAL_TIMEOUT=${EVAL_TIMEOUT:-30}
      - OTEL_SERVICE_NAME=evaluation-service
      - OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=phoenix:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
    depends_on:
      postgres:
        condition: service_healthy
      agent-2-rag:
        condition: service_started
      phoenix:
        condition: service_started
    restart: unless-stopped
    networks:
      - ticket-tracker-net

volumes:
  postgres_data:
  minio_data:

networks:
  ticket-tracker-net:
    driver: bridge